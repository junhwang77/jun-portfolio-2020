{"version":3,"file":"static/webpack/static/development/pages/index.js.13b14e6a834a90e98218.hot-update.js","sources":["webpack:///./components/Menu.js","webpack:///./components/menu/MenuHeader.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { Accordion, Menu } from 'semantic-ui-react'\nimport Plx from 'react-plx'\nimport MenuHeader from '../components/menu/MenuHeader.js'\n\n\nconst plxMenu = {\n  opacity: 0,\n  position: 'relative',\n  right: '-250px',\n}\n\nexport default class PlxMenu extends Component {\n  state = { \n    activeItem: 'Bio',\n    activeIndex: '' \n  }\n\n  componentDidMount(){\n    window.addEventListener('scroll', this.handleScroll, false)\n  }\n\n  handleItemClick = (e, { name }) => {\n    let element = document.getElementsByClassName(name)[0];\n    element.scrollIntoView({behavior: 'smooth'});\n  }\n\n  handleAccordionClick = (e, titleProps) => {\n    const { index } = titleProps\n    const { activeIndex } = this.state\n    const newIndex = activeIndex === index ? -1 : index\n\n    this.setState({ activeIndex: newIndex })\n  }\n\n  \n  handleScroll = () => {\n    let introNode = { node:document.getElementsByClassName('Intro'), name:'Intro' }\n    let animalNode = { node:document.getElementsByClassName('Animals'), name:'Animals' }\n    let programmingNode = { node:document.getElementsByClassName('Programming'), name:'Programming' }\n    let projectsNode = { node:document.getElementsByClassName('Projects'), name:'Projects' }\n    let connectNode = { node:document.getElementsByClassName('Connect'), name:'Connect' }\n    let menuArray = [introNode, animalNode, programmingNode, projectsNode, connectNode]\n\n    menuArray.map(e => {\n      let nodeScrollSize = e.node[0].offsetTop + e.node[0].scrollHeight \n      if(e.node[0].offsetTop - 300 <= window.scrollY && window.scrollY <= nodeScrollSize ) {\n        this.setState({ activeItem: e.name })\n        if(e.name == 'Intro' || e.name == 'Animals' || e.name == 'Programming'){\n          this.setState({ activeIndex: 0 })\n        }\n      }\n    })\n\n    //let elementScroll = document.getElementsByClassName(name)[0].scrollTop\n    //if(currentScroll == elementScroll) {\n    //  this.setState({ activeItem: name });\n    //}\n  }\n\n  render() {\n    const { activeItem } = this.state\n    const { activeIndex } = this.state\n\n    const BioContent = (\n      <Menu.Menu>\n        <Menu.Item\n          name='Intro'\n          active={activeItem === 'Intro'}\n          onClick={this.handleItemClick}\n        />\n        <Menu.Item\n          name='Animals'\n          active={activeItem === 'Animals'}\n          onClick={this.handleItemClick}\n        />\n        <Menu.Item\n          name='Programming'\n          active={activeItem === 'Programming'}\n          onClick={this.handleItemClick}\n        />\n      </Menu.Menu>\n    )\n\n    return (\n      <Plx\n        className='dynMenu'\n        style={plxMenu}\n        animateWhenNotInViewport={ true }\n        parallaxData={ [\n          {\n            start: 500,\n            duration: 300,\n            name: 'first',\n            properties: [\n              {\n                startValue: 0,\n                endValue: -250,\n                property: 'translateX',\n              },\n              {\n                startValue: 0,\n                endValue: 1,\n                property: 'opacity'\n              }\n            ],\n          },\n        ] }\n      >\n        <div>\n          <MenuHeader/>\n          \n          <Accordion as={Menu} pointing secondary vertical fluid inverted>\n              <Accordion.Title\n                as={Menu.Item}\n                content='Bio'\n                active={activeIndex === 0}\n                index={0}\n                onClick={this.handleAccordionClick}\n              />\n              <Accordion.Content active={activeIndex === 0} content={BioContent} />\n            <Menu.Item\n              name='Projects'\n              active={activeItem === 'Projects'}\n              onClick={this.handleItemClick}\n            />\n            <Menu.Item\n              name='Connect'\n              active={activeItem === 'Connect'}\n              onClick={this.handleItemClick}\n            />\n          </Accordion>\n          <style jsx global>\n            {`\n              .ui.secondary.vertical.pointing.menu .item {\n                border-left-style: solid;\n                border-left-width: 2px;\n                border-left-color: grey;\n                border-right-style: none;\n                border-right-width: 0;\n                border-right-color: none;\n              }\n              .ui.secondary.vertical.pointing.menu {\n                border-left-width: 2px;\n                border-left-style: solid;\n                border-left-color: rgba(34,36,38,.15);\n                border-right-width: 0;\n                border-right-style: none;\n                border-right-color: none;\n              }\n              .ui.secondary.vertical.pointing.menu .item {\n                margin: 0 0 0 -2px;\n              }\n              .ui.vertical.menu .item>i.icon {\n                transform: scaleX(-1);\n              }\n              .ui.accordion:not(.styled) .accordion .title~.content:not(.ui), .ui.accordion:not(.styled) .title~.content:not(.ui) {\n                padding: 0;\n                text-indent: 18px;\n              }\n              .ui.secondary.pointing.menu .dropdown.item:active, .ui.secondary.pointing.menu .link.item:active, .ui.secondary.pointing.menu a.item:active {\n                border-color: grey;\n              }\n            `}\n          </style>\n        </div>\n      </Plx>\n    )\n  }\n}","import { Segment, Image } from 'semantic-ui-react'\n\nconst menuHeaderStyle = {\n  backgroundColor: 'black',\n  color: 'white',\n  textAlign: 'center',\n  fontStyle: 'italic',\n}\n\nconst MenuHeader = () => (\n  <Segment style={menuHeaderStyle}>\n    <Image src='/web-portfolio-png/name.png' size='small' centered/>\n    <p>( Hwang, Jun-Hyun )</p>\n  </Segment>\n  )\n\nexport default MenuHeader"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAHA;AACA;AAKA;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAQA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;;;;AAzCA;AACA;AACA;;;AAwCA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAVA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAAA;AAAA;AA2DA;;;;AA5JA;AACA;;;;;;;;;;;;;;;;;;;;;;ACbA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AACA;AAMA;;;;A","sourceRoot":""}